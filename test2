# C 語言資料結構基礎與物件導向延伸

## 1. 陣列（Array）

陣列是一種能夠 **儲存多個相同資料型態元素** 的結構。  
在 C 語言中，陣列的索引（index）從 **0 開始**。

```c
int nums[5] = {10, 20, 30, 40, 50};
printf("%d", nums[0]); // 輸出 10
➤ 陣列特性
所有元素 型態相同

使用 索引 存取

建立後大小固定，無法動態變更

2. 陣列在記憶體的配置
陣列的元素在記憶體中是 連續配置（contiguous memory allocation）。

例如：

c
複製程式碼
int nums[3] = {1, 2, 3};
假設 nums[0] 的位址是 1000，
而 int 佔 4 bytes，則：

元素	值	記憶體位址
nums[0]	1	1000
nums[1]	2	1004
nums[2]	3	1008

👉 優點：存取速度快（可直接透過位移計算位置）
👉 缺點：大小固定、無法儲存不同型態的資料

3. 結構體（Structure）
結構體是 C 語言提供的一種 自訂資料型態（user-defined type），
能將不同型態的資料組合成一個整體。

c
複製程式碼
struct Student {
    char name[20];
    int age;
    float score;
};
使用方式：

c
複製程式碼
struct Student s1 = {"Tom", 18, 95.5};
printf("%s, %d, %.1f\n", s1.name, s1.age, s1.score);
4. 結構體在記憶體的配置
結構體中的成員會依序在記憶體中排列，但可能因「對齊（alignment）」而出現間隔。

範例：

c
複製程式碼
struct Example {
    char a;    // 1 byte
    int b;     // 4 bytes
    char c;    // 1 byte
};
可能的記憶體配置：

成員	大小	位址範圍
a	1 byte	1000
（padding）	3 bytes	1001–1003
b	4 bytes	1004–1007
c	1 byte	1008
（padding）	3 bytes	1009–1011

總大小：12 bytes（含對齊空間）

💡 對齊的目的：讓 CPU 存取資料更快，避免跨越記憶體邊界。

5. 結構體與陣列的比較
比較項目	陣列（Array）	結構體（Struct）
元素型態	相同	不同
用途	儲存多筆相同資料	組合不同資料成一個整體
記憶體配置	連續配置	依成員排列（含對齊）
存取方式	使用索引（arr[i]）	使用成員名稱（.）
可否混合型態	❌ 否	✅ 可以

6. 從 C 結構體到 C++ 類別（class）
C++ 延伸了 C 的結構體概念，引入了 物件導向（Object-Oriented Programming, OOP）。
在 C++ 中，class 與 struct 幾乎相同，但提供更多功能。

➤ C 結構體：只包含資料
c
複製程式碼
struct Student {
    char name[20];
    int age;
    float score;
};
➤ C++ 類別：資料 + 方法（行為）
cpp
複製程式碼
#include <iostream>
using namespace std;

class Student {
private:
    string name;
    int age;
    float score;

public:
    // 建構子
    Student(string n, int a, float s) {
        name = n;
        age = a;
        score = s;
    }

    // 成員方法
    void showInfo() {
        cout << name << ", " << age << ", " << score << endl;
    }
};

int main() {
    Student s1("Tom", 18, 95.5);
    s1.showInfo();
    return 0;
}
➤ 結構體 → 類別的演進
概念	C 結構體	C++ 類別
封裝（Encapsulation）	❌ 無法限制存取	✅ 可用 private、public
行為（函式）	❌ 不支援	✅ 可定義成員函式
繼承	❌ 無	✅ 有
多型	❌ 無	✅ 有
預設存取權限	public	private

🧠 小結
陣列：連續記憶體中儲存相同型態資料。

結構體：將不同資料型態組成一個整體。

類別（class）：在結構體基礎上加入封裝、繼承、多型，讓資料能「主動運作」。

💬 從陣列 → 結構體 → 類別
是從「被動資料」到「主動物件」的邏輯演進。
